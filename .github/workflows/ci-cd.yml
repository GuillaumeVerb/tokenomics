name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: tokenomics-api
  HEROKU_APP_NAME: tokenomics-api
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev libsnappy-dev zlib1g-dev libbz2-dev libssl-dev
      
      - name: Set up Python with Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: '3.11'
          channels: conda-forge,defaults
          channel-priority: strict
          activate-environment: tokenomics-test
          auto-activate-base: false
      
      - name: Install dependencies
        shell: bash -l {0}
        working-directory: ./backend
        run: |
          conda install -y numpy==1.26.2 pandas==2.1.3 scikit-learn==1.3.2 prophet==1.1.4
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements-test.txt
      
      - name: Run tests with coverage
        shell: bash -l {0}
        working-directory: ./backend
        env:
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test_secret
          ENVIRONMENT: test
          PYTHONPATH: ${GITHUB_WORKSPACE}/backend:${PYTHONPATH:-}
          MONGODB_AUTH_MECHANISM: SCRAM-SHA-1
          MONGODB_AUTH_SOURCE: test
        run: |
          cd ${GITHUB_WORKSPACE}/backend
          python -m pytest --cov=app --cov-report=xml -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
  
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        run: |
          npm test -- --coverage --pool=vmThreads --poolOptions.threads.singleThread --reporter=verbose
        env:
          CI: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        with:
          heroku_api_key: ${{ env.HEROKU_API_KEY }}
          heroku_app_name: ${{ env.HEROKU_APP_NAME }}
          heroku_email: ${{ env.HEROKU_EMAIL }}
          usedocker: true
          docker_heroku_process_type: web
          docker_build_args: |
            NODE_ENV=production
      
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm install --global vercel@latest
          cd frontend
          vercel deploy --token "$VERCEL_TOKEN" --prod --yes \
            --scope "$VERCEL_ORG_ID" \
            --confirm 