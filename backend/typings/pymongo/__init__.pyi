"""Type stubs for pymongo."""
from typing import Any, Dict, List, Optional, Sequence, Union

class MongoClient:
    def __init__(
        self,
        host: Optional[Union[str, Sequence[str]]] = None,
        port: Optional[int] = None,
        document_class: Optional[type] = None,
        tz_aware: Optional[bool] = False,
        connect: Optional[bool] = True,
        **kwargs: Any,
    ) -> None: ...
    def __getitem__(self, name: str) -> "Database": ...
    def __getattr__(self, name: str) -> "Database": ...
    def close(self) -> None: ...
    def drop_database(self, name_or_database: Union[str, "Database"]) -> None: ...
    def list_database_names(self) -> List[str]: ...
    def server_info(self) -> Dict[str, Any]: ...

class Database:
    def __init__(self, client: MongoClient, name: str, **kwargs: Any) -> None: ...
    def __getitem__(self, name: str) -> "Collection": ...
    def __getattr__(self, name: str) -> "Collection": ...
    def list_collection_names(self) -> List[str]: ...
    def drop_collection(self, name_or_collection: Union[str, "Collection"]) -> Dict[str, Any]: ...
    def command(self, command: Union[str, Dict[str, Any]], **kwargs: Any) -> Any: ...

class Collection:
    def __init__(self, database: Database, name: str, **kwargs: Any) -> None: ...
    def insert_one(self, document: Dict[str, Any], **kwargs: Any) -> Any: ...
    def insert_many(self, documents: Sequence[Dict[str, Any]], **kwargs: Any) -> Any: ...
    def find_one(self, filter: Optional[Dict[str, Any]] = None, *args: Any, **kwargs: Any) -> Optional[Dict[str, Any]]: ...
    def find(self, *args: Any, **kwargs: Any) -> "Cursor": ...
    def update_one(self, filter: Dict[str, Any], update: Dict[str, Any], **kwargs: Any) -> Any: ...
    def update_many(self, filter: Dict[str, Any], update: Dict[str, Any], **kwargs: Any) -> Any: ...
    def delete_one(self, filter: Dict[str, Any], **kwargs: Any) -> Any: ...
    def delete_many(self, filter: Dict[str, Any], **kwargs: Any) -> Any: ...
    def count_documents(self, filter: Dict[str, Any], **kwargs: Any) -> int: ...
    def create_index(self, keys: Union[str, Sequence[tuple[str, Union[int, str]]], Dict[str, Union[int, str]]], **kwargs: Any) -> str: ...
    def drop_index(self, index_or_name: Union[str, Sequence[tuple[str, Any]]], **kwargs: Any) -> Dict[str, Any]: ...
    def drop_indexes(self) -> None: ...

class Cursor:
    def __iter__(self) -> "Cursor": ...
    def __next__(self) -> Dict[str, Any]: ...
    def next(self) -> Dict[str, Any]: ...
    def close(self) -> None: ...
    def limit(self, limit: int) -> "Cursor": ...
    def skip(self, skip: int) -> "Cursor": ...
    def sort(self, key_or_list: Union[str, List[tuple[str, int]]], direction: Optional[int] = None) -> "Cursor": ...
    def distinct(self, key: str) -> List[Any]: ...
    def count(self) -> int: ... 