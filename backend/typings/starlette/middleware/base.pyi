"""Type stubs for starlette.middleware.base."""
from typing import Any, Callable, Dict, Optional, Union, Mapping, NamedTuple, TypeVar

from ..types import ASGIApp, Message, Receive, Scope, Send

T = TypeVar('T')

class ClientInfo(NamedTuple):
    host: str
    port: int

class Headers:
    def __init__(self, raw: Mapping[bytes, bytes]) -> None: ...
    def get(self, key: str, default: Optional[T] = None) -> Optional[T]: ...
    def getlist(self, key: str) -> list[str]: ...
    def items(self) -> list[tuple[str, str]]: ...
    def keys(self) -> list[str]: ...
    def values(self) -> list[str]: ...
    def __getitem__(self, key: str) -> str: ...

class State:
    def __init__(self) -> None: ...
    def __getattr__(self, key: str) -> Any: ...
    def __setattr__(self, key: str, value: Any) -> None: ...
    def __delattr__(self, key: str) -> None: ...

class Request:
    def __init__(
        self,
        scope: Scope,
        receive: Optional[Receive] = None,
        send: Optional[Send] = None
    ) -> None: ...
    
    @property
    def url(self) -> Any: ...
    
    @property
    def base_url(self) -> str: ...
    
    @property
    def headers(self) -> Headers: ...
    
    @property
    def query_params(self) -> Mapping[str, str]: ...
    
    @property
    def path_params(self) -> Dict[str, Any]: ...
    
    @property
    def cookies(self) -> Dict[str, str]: ...
    
    @property
    def method(self) -> str: ...
    
    @property
    def state(self) -> State: ...
    
    @property
    def session(self) -> Dict[str, Any]: ...
    
    @property
    def auth(self) -> Any: ...
    
    @property
    def user(self) -> Any: ...
    
    @property
    def client(self) -> ClientInfo: ...
    
    @property
    def path(self) -> str: ...
    
    async def json(self) -> Any: ...
    async def body(self) -> bytes: ...
    async def form(self) -> Mapping[str, Any]: ...
    def close(self) -> None: ...

class BaseHTTPMiddleware:
    def __init__(
        self,
        app: ASGIApp,
        dispatch: Optional[Callable[[Request, Callable], Any]] = None,
    ) -> None: ...
    
    async def __call__(
        self,
        scope: Scope,
        receive: Receive,
        send: Send,
    ) -> None: ...
    
    async def dispatch(
        self,
        request: Request,
        call_next: Callable[[Request], Any],
    ) -> Any: ... 